dev <- dist(rbind(c(alpha.new, beta.new), c(alpha, beta)))
alpha <- alpha.new
beta <- beta.new
}
alpha
beta
alpha <- 0
beta <- 0
dev <- 1
while(dev > 10e-6){
data$v <- alpha + beta * data$ctm.atr
data$u.hat[data$y == 0] <- ((1 + exp(data$v)) * ((data$v) - log(1 + exp(data$v))))[data$y == 0]
data$u.hat[data$y == 1] <- ((1 + exp(-data$v)) * log(1 + exp(data$v)))[data$y == 1]
EMfit<- lm(data$u.hat ~ data$ctm.atr)
coef(EMfit)
alpha.new <- coef(EMfit)[1]
beta.new <- coef(EMfit)[2]
# calculate the deviation of beta.new to beta, normlized by the norm of beta
dev <- dist(rbind(c(alpha.new, beta.new), c(alpha, beta)))
alpha <- alpha.new
beta <- beta.new
}
alpha
beta
alpha <- 0
beta <- 0
dev <- 1
alpha
beta
cbind(1, data$ctm.atr)
?ginv
X <- cbind(1, data$ctm.atr)
params <- ginv(t(X) %*% X) %*% t(X) %*% data$u.hat
params
alpha.new <- params[1]
alpha.new
alpha <- 0
beta <- 0
dev <- 1
while(dev > 10e-6){
data$v <- alpha + beta * data$ctm.atr
data$u.hat[data$y == 0] <- ((1 + exp(data$v)) * ((data$v) - log(1 + exp(data$v))))[data$y == 0]
data$u.hat[data$y == 1] <- ((1 + exp(-data$v)) * log(1 + exp(data$v)))[data$y == 1]
params <- ginv(t(X) %*% X) %*% t(X) %*% data$u.hat
alpha.new <- params[1]
beta.new <- params[2]
# calculate the deviation of beta.new to beta, normlized by the norm of beta
dev <- dist(rbind(c(alpha.new, beta.new), c(alpha, beta)))
alpha <- alpha.new
beta <- beta.new
}
alpha
beta
while(dev > 10e-6){
# calulate the expectation of Z conditional on beta, X and Y = 0/1
data$v <- alpha + beta * data$ctm.atr
data$p1 <- exp(data$v)/(1 + exp(data$v))
data$p0 <- 1 - data$p1
data$e.hat[data$y == 0] <- ((data$p1/data$p0) * log(data$p1) + log(data$p0))[data$y == 0]
data$e.hat[data$y == 1] <-  (-log(data$p1) - (data$p0/data$p1) * log(data$p0))[data$y == 1]
data$u.hat <- data$v + data$e.hat
# OLS: regress Z.new on x and get beta.new
EMfit<- lm(data$u.hat ~ data$ctm.atr)
coef(EMfit)
alpha.new <- coef(EMfit)[1]
beta.new <- coef(EMfit)[2]
# calculate the deviation of beta.new to beta, normlized by the norm of beta
dev <- dist(rbind(c(alpha.new, beta.new), c(alpha, beta)))
alpha <- alpha.new
beta <- beta.new
}
alpha
beta
alpha <- 0
beta <- 0
dev <- 1
while(dev > 10e-6){
# calulate the expectation of Z conditional on beta, X and Y = 0/1
data$v <- alpha + beta * data$ctm.atr
data$p1 <- exp(data$v)/(1 + exp(data$v))
data$p0 <- 1 - data$p1
data$e.hat[data$y == 0] <- ((data$p1/data$p0) * log(data$p1) + log(data$p0))[data$y == 0]
data$e.hat[data$y == 1] <-  (-log(data$p1) - (data$p0/data$p1) * log(data$p0))[data$y == 1]
data$u.hat <- data$v + data$e.hat
# OLS: regress Z.new on x and get beta.new
EMfit<- lm(data$u.hat ~ data$ctm.atr)
coef(EMfit)
alpha.new <- coef(EMfit)[1]
beta.new <- coef(EMfit)[2]
# calculate the deviation of beta.new to beta, normlized by the norm of beta
dev <- dist(rbind(c(alpha.new, beta.new), c(alpha, beta)))
alpha <- alpha.new
beta <- beta.new
}
alpha/beta
alpha
beta
a <- coef(mle.fit)
a
a[1]
a[1]/a[2]
cond.prob.df
# This file uses simulation to check whether it is possible to estimate a Ciliberto
# & Tamer (2009) style entry model with revealed preference moment inequalities
# Date: Apr 24, 2018
# Author: Shuang Wang
# Institution: Department of Economics, Boston University
rm(list = ls()) # clear worksapce
cat("\014") #clear the console
# Data Generating Process -------------------------------------------------
N <- 2 #no. of firms
M <- 1000 #no. of markets
set.seed(1)
cost <- matrix(runif(N * M), ncol = N) # unobservable cost of entry
x <-  matrix(runif(N * M, min = 0, max = 2), ncol = N)
alpha <- 3/4
beta <- 1/2
data <- data.frame(mktid = seq(from = 1, to = M, by = 1),
x1 = x[, 1],
x2 = x[, 2],
cost1 = cost[, 1],
cost2 = cost[, 2]) #adding multiple columns simultaneously
#solve for eq
eq <- matrix(0, M, 2^N)
k <- 1
for(j in 0 : (N - 1)){
for(i in 0 : (N - 1)){
eq[ , k] <- (-1)^i * (alpha * x[, 1] - beta * j - cost[, 1]) < 0 &
(-1)^j * (alpha * x[, 2] - beta * i - cost[, 2]) < 0
k <- k + 1
}
}
data$eq <- sapply(apply(eq == 1, 1, which), function(x){x[sample(length(x), size = 1)]})
#different numbers indicate different eqs: 1 --> (0, 0), 2 --> (1, 0), 3 --> (0, 1), 4 --> (1, 1)
y <- matrix(0, nrow = M, ncol = N)
data$y1 <- data$eq == 2 | data$eq == 4
data$y2 <- data$eq >= 3
P11 <- sum(data$eq == 1)/M
P10 <- sum(data$eq == 2)/M
P01 <- sum(data$eq == 3)/M
P00 <- sum(data$eq == 4)/M
data$x1.itv <- floor(data$x1/0.5)
data$x2.itv <- floor(data$x2/0.5)
cond.prob.df <- aggregate(eq ~ x1.itv + x2.itv, data = data,
FUN = function(x){
rowSums(matrix(rep(x, each = 4), nrow = 4) == c(1, 2, 3, 4))/length(x)})
colnames(cond.prob.df)[colnames(cond.prob.df) == "eq"] <- "cond.prob"
cond.prob.df <- merge(data, cond.prob.df, by.x = c("x1.itv", "x2.itv"))
cond.prob.df <- cond.prob.df[order(cond.prob.df$mktid), ]
data$cond.prob <- cond.prob.df$cond.prob[cbind(1 : nrow(data), data$eq)]
head(data)
cond.prob.df <- aggregate(eq ~ x1.itv + x2.itv, data = data,
FUN = function(x){
rowSums(matrix(rep(x, each = 4), nrow = 4) == c(1, 2, 3, 4))/length(x)})
cond.prob.df
head(data)
head(data)
alpha <- 3/4
beta <- 1/2
alpha
beta
data$P11 <- punif(alpha * data$x1 - beta) * punif(alpha * data$x2 - beta)
head(data)
data$P00 <- (1 - punif(alpha * data$x1)) * (1 - punif(alpha * data$x2))
aggregate(P11 ~ x1.itv + x2.itv, data, FUN = mean)
aggregate(c(P11, P00) ~ x1.itv + x2.itv, data, FUN = mean)
?aggregate
aggregate(c("P11", "P00") ~ x1.itv + x2.itv, data, FUN = mean)
aggregate(cbind(P11, P00) ~ x1.itv + x2.itv, data, FUN = mean)
cond.prob.df
aggregate(cbind(P00, P11) ~ x1.itv + x2.itv, data, FUN = mean)
prob.pred.df <- aggregate(cbind(P00, P11) ~ x1.itv + x2.itv, data, FUN = mean)
prob.pred.df[, c(P00, P11)]
prob.pred.df <- aggregate(cbind(P00, P11) ~ x1.itv + x2.itv, data, FUN = mean)
prob.pred.df[, c("P00", "P11")]
cond.prob.df[, c("P00", "P11")]
head(cond.prob.df)
cond.prob.df[, c("eq.1", "eq.2")]
cond.prob.df[, c("eq.1", "eq.4")]
cond.prob.df[, c("eq")]
cond.prob.df[, c("eq")][, c(1, 4)]
prob.pred.df[, c("P00", "P11")] - cond.prob.df[, c("eq")][, c(1, 4)]
norm(prob.pred.df[, c("P00", "P11")] - cond.prob.df[, c("eq")][, c(1, 4)], "2")
obj.eq <- function(params){
alpha <- params[1]
beta <- params[2]
data$P00 <- (1 - punif(alpha * data$x1)) * (1 - punif(alpha * data$x2))
data$P11 <- punif(alpha * data$x1 - beta) * punif(alpha * data$x2 - beta)
prob.pred.df <- aggregate(cbind(P00, P11) ~ x1.itv + x2.itv, data, FUN = mean)
norm(prob.pred.df[, c("P00", "P11")] - cond.prob.df[, c("eq")][, c(1, 4)], "2")
}
optim(par = c(0, 0), fn = obj.eq)
auglag(par = c(0, 0), fn = obj.eq, hin = numeric(0))
auglag(par = c(0, 0), fn = obj.eq, hin = numeric(0))
hin <- function(params){numeric(0)}
auglag(par = c(0, 0), fn = obj.eq, hin = numeric(0))
auglag(par = c(0, 0), fn = obj.eq, hin = hin)
obj.eq <- function(params){
alpha <- params[1]
beta <- params[2]
data$P00 <- (1 - punif(alpha * data$x1)) * (1 - punif(alpha * data$x2))
data$P11 <- punif(alpha * data$x1 - beta) * punif(alpha * data$x2 - beta)
prob.pred.df <- aggregate(cbind(P00, P11) ~ x1.itv + x2.itv, data, FUN = mean)
norm(prob.pred.df[, c("P00", "P11")] - cond.prob.df[, c("eq")][, c(1, 4)], "2")
}
auglag(par = c(0, 0), fn = obj.eq, hin = hin)
optim(par = c(0, 0.5), fn = obj.eq)
optim(par = c(0.5, 0.5), fn = obj.eq)
?norm
?nrom
?norm
norm(2, "2")
norm(c(1, 1), "2")
norm(c(1, 1), "m")
norm(c(1, 1), "2")
head(data)
alpha <- 0.75
beta <- 0.5
Q <- 0
sub.data1 <- data[data$eq == 1, ]
head(sub.data1)
(1 - punif(alpha * sub.data1$x1)) * ((1 - punif(alpha * sub.data1$x2)))
a <- (1 - punif(alpha * sub.data1$x1)) * ((1 - punif(alpha * sub.data1$x2)))
sum((a - sub.data1$cond.prob)^2)
sub.data2 <- data[data$eq == 2, ]
pmin(alpha * sub.data2$x1 * sub.data2$cond.prob -
(1 - (alpha * sub.data2$x2 - beta)) * (alpha * sub.data2$x1 - beta)^2/2 -
(1 - alpha * sub.data2$x2) * ((alpha * sub.data2$x1)^2 -
(alpha * sub.data2$x1 - beta)^2)/2,
0)
nrow(sub.data2)
obj <- function(params){
alpha <- params[1]
beta <- params[2]
Q <- 0
sub.data1 <- data[data$eq == 1, ]
Q <- Q + sum(pmax(alpha * sub.data1$x1 * sub.data1$cond.prob -
(1 - alpha * sub.data1$x2) * (1 - (alpha * sub.data1$x1))/2,
0)^2)
Q <- Q + sum(pmax(alpha * sub.data1$x2 * sub.data1$cond.prob -
(1 - alpha * sub.data1$x1) * (1 - (alpha * sub.data1$x2))/2,
0)^2)
sub.data2 <- data[data$eq == 2, ]
Q <- Q + sum(pmin(alpha * sub.data2$x1 * sub.data2$cond.prob -
(1 - (alpha * sub.data2$x2 - beta)) * (alpha * sub.data2$x1 - beta)^2/2 -
(1 - alpha * sub.data2$x2) * ((alpha * sub.data2$x1)^2 -
(alpha * sub.data2$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmax((alpha * sub.data2$x2 - beta) * sub.data2$cond.prob -
alpha * sub.data2$x1 * (1 - (alpha * sub.data2$x2)^2)/2 -
(alpha * sub.data2$x1 - beta) * ((alpha * sub.data2$x2)^2 -
(alpha * sub.data2$x2 - beta)^2)/2,
0)^2)
sub.data3 <- data[data$eq == 3, ]
Q <- Q + sum(pmax((alpha * sub.data3$x1 - beta) * sub.data3$cond.prob -
alpha * sub.data3$x2 * (1 - (alpha * sub.data3$x1)^2)/2 -
(alpha * sub.data3$x2 - beta) * ((alpha * sub.data3$x1)^2 -
(alpha * sub.data3$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmin(alpha * sub.data3$x2 * sub.data3$cond.prob -
(1 - (alpha * sub.data3$x1 - beta)) * (alpha * sub.data3$x2 - beta)^2/2 -
(1 - alpha * sub.data3$x1) * ((alpha * sub.data3$x2)^2 -
(alpha * sub.data3$x2 - beta)^2)/2,
0)^2)
sub.data4 <- data[data$eq == 4, ]
Q <- Q + sum(pmin((alpha * sub.data4$x1 - beta) * sub.data4$cond.prob -
(alpha * sub.data4$x2 - beta) * (alpha * sub.data4$x1 - beta)^2/2,
0)^2)
Q <- Q + sum(pmin((alpha * sub.data4$x2 - beta) * sub.data4$cond.prob -
(alpha * sub.data4$x1 - beta) * (alpha * sub.data4$x2 - beta)^2/2,
0)^2)
return(Q/M)
}
head(data)
rm(list = ls()) # clear worksapce
cat("\014") #clear the console
# Data Generating Process -------------------------------------------------
N <- 2 #no. of firms
M <- 1000 #no. of markets
set.seed(1)
cost <- matrix(runif(N * M), ncol = N) # unobservable cost of entry
x <-  matrix(runif(N * M, min = 0, max = 2), ncol = N)
alpha <- 3/4
beta <- 1/2
data <- data.frame(mktid = seq(from = 1, to = M, by = 1),
x1 = x[, 1],
x2 = x[, 2],
cost1 = cost[, 1],
cost2 = cost[, 2]) #adding multiple columns simultaneously
#solve for eq
eq <- matrix(0, M, 2^N)
k <- 1
for(j in 0 : (N - 1)){
for(i in 0 : (N - 1)){
eq[ , k] <- (-1)^i * (alpha * x[, 1] - beta * j - cost[, 1]) < 0 &
(-1)^j * (alpha * x[, 2] - beta * i - cost[, 2]) < 0
k <- k + 1
}
}
data$eq <- sapply(apply(eq == 1, 1, which), function(x){x[sample(length(x), size = 1)]})
#different numbers indicate different eqs: 1 --> (0, 0), 2 --> (1, 0), 3 --> (0, 1), 4 --> (1, 1)
y <- matrix(0, nrow = M, ncol = N)
data$y1 <- data$eq == 2 | data$eq == 4
data$y2 <- data$eq >= 3
P11 <- sum(data$eq == 1)/M
P10 <- sum(data$eq == 2)/M
P01 <- sum(data$eq == 3)/M
P00 <- sum(data$eq == 4)/M
data$x1.itv <- floor(data$x1/0.5)
data$x2.itv <- floor(data$x2/0.5)
cond.prob.df <- aggregate(eq ~ x1.itv + x2.itv, data = data,
FUN = function(x){
rowSums(matrix(rep(x, each = 4), nrow = 4) == c(1, 2, 3, 4))/length(x)})
colnames(cond.prob.df)[colnames(cond.prob.df) == "eq"] <- "cond.prob"
cond.prob.df <- merge(data, cond.prob.df, by.x = c("x1.itv", "x2.itv"))
cond.prob.df <- cond.prob.df[order(cond.prob.df$mktid), ]
data$cond.prob <- cond.prob.df$cond.prob[cbind(1 : nrow(data), data$eq)]
obj <- function(params){
alpha <- params[1]
beta <- params[2]
Q <- 0
sub.data1 <- data[data$eq == 1, ]
Q <- Q + sum(pmax(alpha * sub.data1$x1 * sub.data1$cond.prob -
(1 - alpha * sub.data1$x2) * (1 - (alpha * sub.data1$x1))/2,
0)^2)
Q <- Q + sum(pmax(alpha * sub.data1$x2 * sub.data1$cond.prob -
(1 - alpha * sub.data1$x1) * (1 - (alpha * sub.data1$x2))/2,
0)^2)
sub.data2 <- data[data$eq == 2, ]
Q <- Q + sum(pmin(alpha * sub.data2$x1 * sub.data2$cond.prob -
(1 - (alpha * sub.data2$x2 - beta)) * (alpha * sub.data2$x1 - beta)^2/2 -
(1 - alpha * sub.data2$x2) * ((alpha * sub.data2$x1)^2 -
(alpha * sub.data2$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmax((alpha * sub.data2$x2 - beta) * sub.data2$cond.prob -
alpha * sub.data2$x1 * (1 - (alpha * sub.data2$x2)^2)/2 -
(alpha * sub.data2$x1 - beta) * ((alpha * sub.data2$x2)^2 -
(alpha * sub.data2$x2 - beta)^2)/2,
0)^2)
sub.data3 <- data[data$eq == 3, ]
Q <- Q + sum(pmax((alpha * sub.data3$x1 - beta) * sub.data3$cond.prob -
alpha * sub.data3$x2 * (1 - (alpha * sub.data3$x1)^2)/2 -
(alpha * sub.data3$x2 - beta) * ((alpha * sub.data3$x1)^2 -
(alpha * sub.data3$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmin(alpha * sub.data3$x2 * sub.data3$cond.prob -
(1 - (alpha * sub.data3$x1 - beta)) * (alpha * sub.data3$x2 - beta)^2/2 -
(1 - alpha * sub.data3$x1) * ((alpha * sub.data3$x2)^2 -
(alpha * sub.data3$x2 - beta)^2)/2,
0)^2)
sub.data4 <- data[data$eq == 4, ]
Q <- Q + sum(pmin((alpha * sub.data4$x1 - beta) * sub.data4$cond.prob -
(alpha * sub.data4$x2 - beta) * (alpha * sub.data4$x1 - beta)^2/2,
0)^2)
Q <- Q + sum(pmin((alpha * sub.data4$x2 - beta) * sub.data4$cond.prob -
(alpha * sub.data4$x1 - beta) * (alpha * sub.data4$x2 - beta)^2/2,
0)^2)
return(Q/M)
}
obj.eq <- function(params){
alpha <- params[1]
beta <- params[2]
data$P00 <- (1 - punif(alpha * data$x1)) * (1 - punif(alpha * data$x2))
data$P11 <- punif(alpha * data$x1 - beta) * punif(alpha * data$x2 - beta)
prob.pred.df <- aggregate(cbind(P00, P11) ~ x1.itv + x2.itv, data, FUN = mean)
norm(prob.pred.df[, c("P00", "P11")] - cond.prob.df[, c("eq")][, c(1, 4)], "2")
}
obj.eq.in <- function(params){
alpha <- params[1]
beta <- params[2]
Q <- 0
sub.data1 <- data[data$eq == 1, ]
Q <- Q +
sum(((1 - punif(alpha * sub.data1$x1)) * ((1 - punif(alpha * sub.data1$x2))) -
sub.data1$cond.prob)^2)
sub.data2 <- data[data$eq == 2, ]
Q <- Q + sum(pmin(alpha * sub.data2$x1 * sub.data2$cond.prob -
(1 - (alpha * sub.data2$x2 - beta)) * (alpha * sub.data2$x1 - beta)^2/2 -
(1 - alpha * sub.data2$x2) * ((alpha * sub.data2$x1)^2 -
(alpha * sub.data2$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmax((alpha * sub.data2$x2 - beta) * sub.data2$cond.prob -
alpha * sub.data2$x1 * (1 - (alpha * sub.data2$x2)^2)/2 -
(alpha * sub.data2$x1 - beta) * ((alpha * sub.data2$x2)^2 -
(alpha * sub.data2$x2 - beta)^2)/2,
0)^2)
sub.data3 <- data[data$eq == 3, ]
Q <- Q + sum(pmax((alpha * sub.data3$x1 - beta) * sub.data3$cond.prob -
alpha * sub.data3$x2 * (1 - (alpha * sub.data3$x1)^2)/2 -
(alpha * sub.data3$x2 - beta) * ((alpha * sub.data3$x1)^2 -
(alpha * sub.data3$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmin(alpha * sub.data3$x2 * sub.data3$cond.prob -
(1 - (alpha * sub.data3$x1 - beta)) * (alpha * sub.data3$x2 - beta)^2/2 -
(1 - alpha * sub.data3$x1) * ((alpha * sub.data3$x2)^2 -
(alpha * sub.data3$x2 - beta)^2)/2,
0)^2)
sub.data4 <- data[data$eq == 4, ]
Q <- Q + sum((punif(alpha * sub.data4$x1 - beta) * punif(alpha * sub.data4$x2 - beta) -
sub.data4$cond.prob)^2)
}
optim(par = c(0.5, 0.5), fn = obj)
optim(par = c(0, 0), fn = obj)
obj.eq.in <- function(params){
alpha <- params[1]
beta <- params[2]
Q <- 0
sub.data1 <- data[data$eq == 1, ]
Q <- Q +
sum(((1 - punif(alpha * sub.data1$x1)) * ((1 - punif(alpha * sub.data1$x2))) -
sub.data1$cond.prob)^2)
sub.data2 <- data[data$eq == 2, ]
Q <- Q + sum(pmin(alpha * sub.data2$x1 * sub.data2$cond.prob -
(1 - (alpha * sub.data2$x2 - beta)) * (alpha * sub.data2$x1 - beta)^2/2 -
(1 - alpha * sub.data2$x2) * ((alpha * sub.data2$x1)^2 -
(alpha * sub.data2$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmax((alpha * sub.data2$x2 - beta) * sub.data2$cond.prob -
alpha * sub.data2$x1 * (1 - (alpha * sub.data2$x2)^2)/2 -
(alpha * sub.data2$x1 - beta) * ((alpha * sub.data2$x2)^2 -
(alpha * sub.data2$x2 - beta)^2)/2,
0)^2)
sub.data3 <- data[data$eq == 3, ]
Q <- Q + sum(pmax((alpha * sub.data3$x1 - beta) * sub.data3$cond.prob -
alpha * sub.data3$x2 * (1 - (alpha * sub.data3$x1)^2)/2 -
(alpha * sub.data3$x2 - beta) * ((alpha * sub.data3$x1)^2 -
(alpha * sub.data3$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmin(alpha * sub.data3$x2 * sub.data3$cond.prob -
(1 - (alpha * sub.data3$x1 - beta)) * (alpha * sub.data3$x2 - beta)^2/2 -
(1 - alpha * sub.data3$x1) * ((alpha * sub.data3$x2)^2 -
(alpha * sub.data3$x2 - beta)^2)/2,
0)^2)
sub.data4 <- data[data$eq == 4, ]
Q <- Q + sum((punif(alpha * sub.data4$x1 - beta) * punif(alpha * sub.data4$x2 - beta) -
sub.data4$cond.prob)^2)
}
optim(par = c(0, 0), fn = obj.eq.in)
obj.eq <- function(params){
alpha <- params[1]
beta <- params[2]
data$P00 <- (1 - punif(alpha * data$x1)) * (1 - punif(alpha * data$x2))
data$P11 <- punif(alpha * data$x1 - beta) * punif(alpha * data$x2 - beta)
prob.pred.df <- aggregate(cbind(P00, P11) ~ x1.itv + x2.itv, data, FUN = mean)
norm(prob.pred.df[, c("P00", "P11")] - cond.prob.df[, c("eq")][, c(1, 4)], "2")
}
optim(par = c(0, 0), fn = obj.eq)
obj.eq <- function(params){
alpha <- params[1]
beta <- params[2]
Q <- 0
sub.data1 <- data[data$eq == 1, ]
Q <- Q +
sum(((1 - punif(alpha * sub.data1$x1)) * ((1 - punif(alpha * sub.data1$x2))) -
sub.data1$cond.prob)^2)
sub.data4 <- data[data$eq == 4, ]
Q <- Q + sum((punif(alpha * sub.data4$x1 - beta) * punif(alpha * sub.data4$x2 - beta) -
sub.data4$cond.prob)^2)
}
optim(par = c(0, 0), fn = obj.eq)
augluag(par = c(0, 0), fn = obj.eq, hin = numeric(0))
auglag(par = c(0, 0), fn = obj.eq, hin = numeric(0))
hin <- function(params){numeric(0)}
augluag(par = c(0, 0), fn = obj.eq, hin = hin)
auglag(par = c(0, 0), fn = obj.eq, hin = hin)
auglag(par = c(0, 0), fn = obj.eq.in, hin = hin)
optim(par = c(0, 0), fn = obj.eq.in)
optim(par = c(0, 0), fn = obj.eq)
obj <- function(params){
alpha <- params[1]
beta <- params[2]
Q <- 0
sub.data1 <- data[data$eq == 1, ]
Q <- Q + sum(pmax(alpha * sub.data1$x1 * sub.data1$cond.prob -
(1 - alpha * sub.data1$x2) * (1 - (alpha * sub.data1$x1))/2,
0)^2)
Q <- Q + sum(pmax(alpha * sub.data1$x2 * sub.data1$cond.prob -
(1 - alpha * sub.data1$x1) * (1 - (alpha * sub.data1$x2))/2,
0)^2)
sub.data2 <- data[data$eq == 2, ]
Q <- Q + sum(pmin(alpha * sub.data2$x1 * sub.data2$cond.prob -
(1 - (alpha * sub.data2$x2 - beta)) * (alpha * sub.data2$x1 - beta)^2/2 -
(1 - alpha * sub.data2$x2) * ((alpha * sub.data2$x1)^2 -
(alpha * sub.data2$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmax((alpha * sub.data2$x2 - beta) * sub.data2$cond.prob -
alpha * sub.data2$x1 * (1 - (alpha * sub.data2$x2)^2)/2 -
(alpha * sub.data2$x1 - beta) * ((alpha * sub.data2$x2)^2 -
(alpha * sub.data2$x2 - beta)^2)/2,
0)^2)
sub.data3 <- data[data$eq == 3, ]
Q <- Q + sum(pmax((alpha * sub.data3$x1 - beta) * sub.data3$cond.prob -
alpha * sub.data3$x2 * (1 - (alpha * sub.data3$x1)^2)/2 -
(alpha * sub.data3$x2 - beta) * ((alpha * sub.data3$x1)^2 -
(alpha * sub.data3$x1 - beta)^2)/2,
0)^2)
Q <- Q + sum(pmin(alpha * sub.data3$x2 * sub.data3$cond.prob -
(1 - (alpha * sub.data3$x1 - beta)) * (alpha * sub.data3$x2 - beta)^2/2 -
(1 - alpha * sub.data3$x1) * ((alpha * sub.data3$x2)^2 -
(alpha * sub.data3$x2 - beta)^2)/2,
0)^2)
sub.data4 <- data[data$eq == 4, ]
Q <- Q + sum(pmin((alpha * sub.data4$x1 - beta) * sub.data4$cond.prob -
(alpha * sub.data4$x2 - beta) * (alpha * sub.data4$x1 - beta)^2/2,
0)^2)
Q <- Q + sum(pmin((alpha * sub.data4$x2 - beta) * sub.data4$cond.prob -
(alpha * sub.data4$x1 - beta) * (alpha * sub.data4$x2 - beta)^2/2,
0)^2)
return(Q/M)
}
optim(par = c(0.5, 0.5), fn = obj.eq.in)
optim(par = c(1, 1), fn = obj.eq.in)
